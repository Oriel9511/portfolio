---
import LanguageSwitcher from "./LanguageSwitcher.astro";
import TranslatedText from "./TranslatedText.astro";

const links = [
    { href: "#top", textKey: "nav.home" },
    { href: "#core", textKey: "nav.coreStrength" },
    { href: "#skills", textKey: "nav.technicalSkills" },
    { href: "#experience", textKey: "nav.experience" },
    { href: "#projects", textKey: "nav.projects" },
    { href: "#about", textKey: "nav.about" },
];
---

<header class="fixed top-0 left-0 right-0 z-50 bg-slate-900/80 backdrop-blur-xl border-b border-white/10">
    <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
            <!-- Desktop Navigation -->
            <nav class="hidden md:flex items-center space-x-8 flex-1 justify-center">
                {links.map((link) => (
                    <a class="nav-link text-sm font-medium text-white/80 hover:text-white transition-all duration-200 relative group" href={link.href}>
                        <TranslatedText textKey={link.textKey} />
                        <span class="absolute bottom-0 left-0 w-0 h-0.5 bg-gradient-to-r from-blue-500 to-purple-500 transition-all duration-200 group-hover:w-full"></span>
                    </a>
                ))}
            </nav>
            
            <!-- Mobile Menu Button -->
            <div class="md:hidden">
                <button id="menu-toggle" class="p-2 rounded-lg hover:bg-white/10 transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                    </svg>
                </button>
            </div>
            
            <!-- Language Switcher -->
            <div class="flex items-center">
                <LanguageSwitcher />
            </div>
        </div>
    </div>
</header>

<!-- Mobile Menu Overlay -->
<div id="mobile-menu" class="fixed inset-0 bg-slate-900/95 backdrop-blur-xl z-40 hidden opacity-0 transition-all duration-300 ease-in-out">
    <div class="flex flex-col h-full">
        <!-- Mobile Header -->
        <div class="flex justify-between items-center p-6 border-b border-white/10">
            <span class="text-lg font-semibold">Navigation</span>
            <button id="close-menu" class="p-2 rounded-lg hover:bg-white/10 transition-colors">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        
        <!-- Mobile Navigation -->
        <nav class="flex-1 flex flex-col justify-center px-6 space-y-6">
            {links.map((link) => (
                <a class="mobile-nav-link block text-2xl font-medium text-white/80 hover:text-white py-4 px-6 rounded-lg hover:bg-white/5 transition-all duration-200 border border-transparent hover:border-white/10" href={link.href}>
                    <TranslatedText textKey={link.textKey} />
                </a>
            ))}
        </nav>
    </div>
</div>

<style>
    .mobile-menu-open {
        overflow: hidden;
    }
</style>

<script>
    const menuToggle = document.getElementById('menu-toggle');
    const closeMenu = document.getElementById('close-menu');
    const mobileMenu = document.getElementById('mobile-menu');

    menuToggle.addEventListener('click', () => {
        mobileMenu.classList.remove('hidden');
        mobileMenu.classList.add('flex');
        document.body.classList.add('mobile-menu-open');
        setTimeout(() => {
            mobileMenu.classList.add('opacity-100');
        }, 10);
    });

    closeMenu.addEventListener('click', () => {
        mobileMenu.classList.remove('opacity-100');
        setTimeout(() => {
            mobileMenu.classList.add('hidden');
            mobileMenu.classList.remove('flex');
            document.body.classList.remove('mobile-menu-open');
        }, 300);
    });

    // Close menu when clicking on a link
    const mobileLinks = mobileMenu.querySelectorAll('a');
    mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
            mobileMenu.classList.remove('opacity-100');
            setTimeout(() => {
                mobileMenu.classList.add('hidden');
                mobileMenu.classList.remove('flex');
                document.body.classList.remove('mobile-menu-open');
            }, 300);
        });
    });


</script>
